[gd_scene load_steps=8 format=2]

[sub_resource type="PlaneMesh" id=1]
subdivide_width = 32
subdivide_depth = 32

[sub_resource type="Shader" id=8]
code = "shader_type spatial;
render_mode specular_toon;

uniform sampler2D noise;
uniform sampler2D normalmap;
uniform float height_scale = 0.5;
varying vec2 tex_position;

float wave(vec2 position){
  position += texture(noise, position / 10.0).x * 2.0 - 1.0;
  vec2 wv = 1.0 - abs(sin(position));
  return pow(1.0 - pow(wv.x * wv.y, 0.65), 4.0);
}

float height(vec2 position, float time) {
  vec2 offset = 0.01 * cos(position + time);
  return texture(noise, (position / 10.0) - offset).x;
}

void vertex() {
	vec2 pos = VERTEX.xz;
	float k = height(pos, TIME);
	VERTEX.y = k;
	NORMAL = normalize(vec3(k - height(pos + vec2(0.1, 0.0), TIME), 0.1, k - height(pos + vec2(0.0, 0.1), TIME)));
	tex_position = VERTEX.xz / 2.0 + 0.5;
	float height = texture(noise, VERTEX.xz / 2.0 + 0.5).x;
	VERTEX.y += height * height_scale;
}

void fragment() {
	NORMALMAP = texture(normalmap, tex_position).xyz;
	float fresnel = sqrt(1.0 - dot(NORMAL, VIEW));
	RIM = 0.2;
	METALLIC = 0.0;
	ROUGHNESS = 0.01 * (1.0 - fresnel);
	ALBEDO = vec3(0.01, 0.03, 0.05) + (0.1 * fresnel);
}"

[sub_resource type="OpenSimplexNoise" id=3]

[sub_resource type="NoiseTexture" id=4]
noise = SubResource( 3 )

[sub_resource type="OpenSimplexNoise" id=6]

[sub_resource type="NoiseTexture" id=7]
as_normalmap = true
noise = SubResource( 6 )

[sub_resource type="ShaderMaterial" id=5]
shader = SubResource( 8 )
shader_param/height_scale = 0.5
shader_param/noise = SubResource( 4 )
shader_param/normalmap = SubResource( 7 )

[node name="MeshInstance" type="MeshInstance"]
mesh = SubResource( 1 )
material/0 = SubResource( 5 )

[node name="OmniLight" type="OmniLight" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.422322, 0 )
__meta__ = {
"_editor_description_": "d"
}
